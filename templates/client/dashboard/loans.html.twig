{% extends 'client/base.html.twig' %}

{% block title %}Mes Prêts{% endblock %}

{% block body %}
<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3 mb-0">
                <i class="fas fa-money-bill-wave text-primary me-2"></i>
                Mes Demandes de Prêt
            </h1>
            <a href="{{ path('loan_request') }}" class="btn btn-primary">
                <i class="fas fa-plus me-1"></i>Nouvelle Demande
            </a>
        </div>
    </div>
</div>

{% if loans|length > 0 %}
    <!-- Filter and Search -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="statusFilter" class="form-label">Filtrer par statut</label>
                            <select class="form-select" id="statusFilter">
                                <option value="">Tous les statuts</option>
                                <option value="pending">En attente</option>
                                <option value="approved">Approuvé</option>
                                <option value="rejected">Rejeté</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="amountFilter" class="form-label">Montant minimum</label>
                            <input type="number" class="form-control" id="amountFilter" placeholder="0">
                        </div>
                        <div class="col-md-4">
                            <label for="searchFilter" class="form-label">Recherche</label>
                            <input type="text" class="form-control" id="searchFilter" placeholder="Rechercher...">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loans Table -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="loansTable">
                            <thead class="table-light">
                                <tr>
                                    <th>
                                        <i class="fas fa-calendar me-1"></i>Date de Demande
                                        <button class="btn btn-sm btn-link p-0 ms-1" onclick="sortTable(0)">
                                            <i class="fas fa-sort"></i>
                                        </button>
                                    </th>
                                    <th>
                                        <i class="fas fa-euro-sign me-1"></i>Montant
                                        <button class="btn btn-sm btn-link p-0 ms-1" onclick="sortTable(1)">
                                            <i class="fas fa-sort"></i>
                                        </button>
                                    </th>
                                    <th>
                                        <i class="fas fa-clock me-1"></i>Durée
                                    </th>
                                    <th>
                                        <i class="fas fa-percentage me-1"></i>Taux
                                    </th>
                                    <th>
                                        <i class="fas fa-info-circle me-1"></i>Statut
                                        <button class="btn btn-sm btn-link p-0 ms-1" onclick="sortTable(4)">
                                            <i class="fas fa-sort"></i>
                                        </button>
                                    </th>
                                    <th>
                                        <i class="fas fa-calendar-check me-1"></i>Dernière Mise à Jour
                                    </th>
                                    <th>
                                        <i class="fas fa-cog me-1"></i>Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for loan in loans %}
                                    <tr data-loan-id="{{ loan.id }}" data-status="{{ loan.status }}" data-amount="{{ loan.amount }}">
                                        <td>
                                            <div class="fw-bold">{{ loan.createdAt|date('d/m/Y') }}</div>
                                            <small class="text-muted">{{ loan.createdAt|date('H:i') }}</small>
                                        </td>
                                        <td>
                                            <div class="fw-bold text-primary">
                                                {{ loan.amount|number_format(0, ',', ' ') }} €
                                            </div>
                                            {% if loan.monthlyPayment %}
                                                <small class="text-muted">
                                                    {{ loan.monthlyPayment|number_format(2, ',', ' ') }} €/mois
                                                </small>
                                            {% endif %}
                                        </td>
                                        <td>
                                            <span class="badge bg-info">{{ loan.duration }} mois</span>
                                        </td>
                                        <td>
                                            <span class="fw-bold">{{ loan.interestRate }}%</span>
                                        </td>
                                        <td>
                                            <span class="badge bg-{{ loan.status == 'approved' ? 'success' : (loan.status == 'pending' ? 'warning' : 'danger') }} status-badge">
                                                {% if loan.status == 'approved' %}
                                                    <i class="fas fa-check me-1"></i>Approuvé
                                                {% elseif loan.status == 'pending' %}
                                                    <i class="fas fa-clock me-1"></i>En attente
                                                {% else %}
                                                    <i class="fas fa-times me-1"></i>Rejeté
                                                {% endif %}
                                            </span>
                                        </td>
                                        <td>
                                            {% if loan.updatedAt %}
                                                <div>{{ loan.updatedAt|date('d/m/Y') }}</div>
                                                <small class="text-muted">{{ loan.updatedAt|date('H:i') }}</small>
                                            {% else %}
                                                <span class="text-muted">-</span>
                                            {% endif %}
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group">
                                                <a href="{{ path('client_loan_detail', {id: loan.id}) }}" 
                                                   class="btn btn-outline-primary" title="Voir les détails">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                {% if loan.status == 'pending' %}
                                                    <button class="btn btn-outline-warning" title="Modifier la demande" disabled>
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                {% endif %}
                                                <button class="btn btn-outline-info track-loan" 
                                                        title="Suivre en temps réel" 
                                                        data-loan-id="{{ loan.id }}">
                                                    <i class="fas fa-sync"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination would go here if needed -->
                    {% if loans|length > 10 %}
                        <nav aria-label="Pagination des prêts" class="mt-4">
                            <ul class="pagination justify-content-center">
                                <!-- Pagination logic here -->
                            </ul>
                        </nav>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Summary -->
    <div class="row mt-4">
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <i class="fas fa-list fa-2x text-primary mb-2"></i>
                    <h5>Total</h5>
                    <h3 class="text-primary">{{ loans|length }}</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                    <h5>Approuvés</h5>
                    <h3 class="text-success">{{ loans|filter(l => l.status == 'approved')|length }}</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <i class="fas fa-clock fa-2x text-warning mb-2"></i>
                    <h5>En Attente</h5>
                    <h3 class="text-warning">{{ loans|filter(l => l.status == 'pending')|length }}</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <i class="fas fa-times-circle fa-2x text-danger mb-2"></i>
                    <h5>Rejetés</h5>
                    <h3 class="text-danger">{{ loans|filter(l => l.status == 'rejected')|length }}</h3>
                </div>
            </div>
        </div>
    </div>

{% else %}
    <!-- Empty State -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-body text-center py-5">
                    <i class="fas fa-money-bill-wave fa-5x text-muted mb-4"></i>
                    <h3 class="text-muted mb-3">Aucune demande de prêt</h3>
                    <p class="lead text-muted mb-4">
                        Vous n'avez pas encore fait de demande de prêt. Commencez dès maintenant !
                    </p>
                    <a href="{{ path('loan_request') }}" class="btn btn-primary btn-lg">
                        <i class="fas fa-plus me-2"></i>Faire une Demande de Prêt
                    </a>
                </div>
            </div>
        </div>
    </div>
{% endif %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Filter functionality
            const statusFilter = document.getElementById('statusFilter');
            const amountFilter = document.getElementById('amountFilter');
            const searchFilter = document.getElementById('searchFilter');
            const table = document.getElementById('loansTable');

            function filterTable() {
                const rows = table.querySelectorAll('tbody tr');
                const statusValue = statusFilter.value.toLowerCase();
                const amountValue = parseFloat(amountFilter.value) || 0;
                const searchValue = searchFilter.value.toLowerCase();

                rows.forEach(row => {
                    const status = row.dataset.status;
                    const amount = parseFloat(row.dataset.amount);
                    const text = row.textContent.toLowerCase();

                    const matchesStatus = !statusValue || status === statusValue;
                    const matchesAmount = amount >= amountValue;
                    const matchesSearch = !searchValue || text.includes(searchValue);

                    row.style.display = matchesStatus && matchesAmount && matchesSearch ? '' : 'none';
                });
            }

            statusFilter.addEventListener('change', filterTable);
            amountFilter.addEventListener('input', filterTable);
            searchFilter.addEventListener('input', filterTable);

            // Real-time tracking
            document.querySelectorAll('.track-loan').forEach(button => {
                button.addEventListener('click', function() {
                    const loanId = this.dataset.loanId;
                    const icon = this.querySelector('i');
                    
                    // Add spinning animation
                    icon.classList.add('fa-spin');
                    
                    fetch(`{{ path('api_loan_status', {id: '__ID__'}) }}`.replace('__ID__', loanId))
                        .then(response => response.json())
                        .then(data => {
                            // Update the status badge
                            const row = document.querySelector(`[data-loan-id="${loanId}"]`);
                            const statusBadge = row.querySelector('.status-badge');
                            
                            let badgeClass = 'bg-warning';
                            let statusText = '<i class="fas fa-clock me-1"></i>En attente';
                            
                            if (data.status === 'approved') {
                                badgeClass = 'bg-success';
                                statusText = '<i class="fas fa-check me-1"></i>Approuvé';
                            } else if (data.status === 'rejected') {
                                badgeClass = 'bg-danger';
                                statusText = '<i class="fas fa-times me-1"></i>Rejeté';
                            }
                            
                            statusBadge.className = `badge ${badgeClass} status-badge`;
                            statusBadge.innerHTML = statusText;
                            
                            // Show notification
                            showNotification('Statut mis à jour', `Le statut du prêt a été actualisé: ${data.status}`, 'info');
                        })
                        .catch(error => {
                            console.error('Erreur:', error);
                            showNotification('Erreur', 'Impossible de mettre à jour le statut', 'danger');
                        })
                        .finally(() => {
                            // Remove spinning animation
                            icon.classList.remove('fa-spin');
                        });
                });
            });

            // Auto-update statuses every 60 seconds
            setInterval(() => {
                document.querySelectorAll('[data-loan-id]').forEach(row => {
                    const loanId = row.dataset.loanId;
                    fetch(`{{ path('api_loan_status', {id: '__ID__'}) }}`.replace('__ID__', loanId))
                        .then(response => response.json())
                        .then(data => {
                            const statusBadge = row.querySelector('.status-badge');
                            
                            let badgeClass = 'bg-warning';
                            let statusText = '<i class="fas fa-clock me-1"></i>En attente';
                            
                            if (data.status === 'approved') {
                                badgeClass = 'bg-success';
                                statusText = '<i class="fas fa-check me-1"></i>Approuvé';
                            } else if (data.status === 'rejected') {
                                badgeClass = 'bg-danger';
                                statusText = '<i class="fas fa-times me-1"></i>Rejeté';
                            }
                            
                            if (statusBadge.innerHTML !== statusText) {
                                statusBadge.className = `badge ${badgeClass} status-badge`;
                                statusBadge.innerHTML = statusText;
                                row.dataset.status = data.status;
                            }
                        })
                        .catch(error => console.error('Erreur de mise à jour automatique:', error));
                });
            }, 60000);
        });

        // Table sorting functionality
        function sortTable(columnIndex) {
            const table = document.getElementById('loansTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            rows.sort((a, b) => {
                const aVal = a.cells[columnIndex].textContent.trim();
                const bVal = b.cells[columnIndex].textContent.trim();
                
                // Handle different data types
                if (columnIndex === 1) { // Amount column
                    return parseFloat(bVal.replace(/[^\d]/g, '')) - parseFloat(aVal.replace(/[^\d]/g, ''));
                } else if (columnIndex === 0 || columnIndex === 5) { // Date columns
                    return new Date(bVal) - new Date(aVal);
                } else {
                    return aVal.localeCompare(bVal);
                }
            });
            
            // Re-append sorted rows
            rows.forEach(row => tbody.appendChild(row));
        }
    </script>
{% endblock %}