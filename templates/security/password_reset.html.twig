{% extends 'base.html.twig' %}

{% block title %}{{ 'password_reset.title'|trans }}{% endblock %}

{% block body %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-body p-4">
                    <div class="text-center mb-4">
                        <h3>{{ 'password_reset.title'|trans }}</h3>
                        <p class="text-muted">
                            {{ 'password_reset.description'|trans({'%user_name%': user.firstName}) }}
                        </p>
                        <small class="text-warning">
                            <i class="fas fa-clock me-1"></i>
                            {{ 'password_reset.expires_at'|trans({'%time%': expires_at|date('H:i'), '%date%': expires_at|date('d/m/Y')}) }}
                        </small>
                    </div>

                    {{ form_start(form, {'attr': {'novalidate': 'novalidate', 'autocomplete': 'off'}}) }}
                        <div class="mb-3">
                            {{ form_row(form.password.first) }}
                        </div>

                        <div class="mb-3">
                            {{ form_row(form.password.second) }}
                        </div>

                        <div class="mb-3">
                            <div class="password-strength-info small text-muted">
                                <p class="mb-1">{{ 'password_reset.password_requirements'|trans }}:</p>
                                <ul class="mb-0">
                                    <li>{{ 'password_reset.password_min_8'|trans }}</li>
                                    <li>{{ 'password_reset.password_uppercase'|trans }}</li>
                                    <li>{{ 'password_reset.password_lowercase'|trans }}</li>
                                    <li>{{ 'password_reset.password_number'|trans }}</li>
                                </ul>
                            </div>
                        </div>

                        <div class="mb-3">
                            {{ form_row(form.submit) }}
                        </div>
                    {{ form_end(form) }}

                    <div class="text-center mt-3">
                        <a href="{{ path('app_login') }}" class="text-decoration-none">
                            <i class="fas fa-arrow-left me-1"></i>
                            {{ 'password_reset.back_to_login'|trans }}
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-focus on password field
            const passwordField = document.getElementById('password_reset_password_first');
            if (passwordField) {
                passwordField.focus();
            }

            // Real-time password strength indicator
            const firstPassword = document.getElementById('password_reset_password_first');
            const secondPassword = document.getElementById('password_reset_password_second');
            
            if (firstPassword && secondPassword) {
                const checkPasswordStrength = function() {
                    const password = firstPassword.value;
                    const requirements = {
                        length: password.length >= 8,
                        uppercase: /[A-Z]/.test(password),
                        lowercase: /[a-z]/.test(password),
                        number: /\d/.test(password)
                    };

                    // Update UI based on requirements
                    const strengthInfo = document.querySelector('.password-strength-info ul');
                    if (strengthInfo && password.length > 0) {
                        const items = strengthInfo.querySelectorAll('li');
                        const reqKeys = ['length', 'uppercase', 'lowercase', 'number'];
                        
                        items.forEach((item, index) => {
                            const reqKey = reqKeys[index];
                            if (requirements[reqKey]) {
                                item.classList.add('text-success');
                                item.classList.remove('text-muted');
                            } else {
                                item.classList.remove('text-success');
                                item.classList.add('text-muted');
                            }
                        });
                    }
                };

                firstPassword.addEventListener('input', checkPasswordStrength);
                
                // Check password match
                const checkPasswordMatch = function() {
                    if (secondPassword.value.length > 0) {
                        if (firstPassword.value === secondPassword.value) {
                            secondPassword.classList.add('is-valid');
                            secondPassword.classList.remove('is-invalid');
                        } else {
                            secondPassword.classList.add('is-invalid');
                            secondPassword.classList.remove('is-valid');
                        }
                    } else {
                        secondPassword.classList.remove('is-valid', 'is-invalid');
                    }
                };

                secondPassword.addEventListener('input', checkPasswordMatch);
                firstPassword.addEventListener('input', checkPasswordMatch);
            }
        });
    </script>
{% endblock %}